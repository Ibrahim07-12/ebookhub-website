// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  name          String?
  password      String?
  image         String?
  provider      String?   @default("credentials")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  purchases     Purchase[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Category {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String
  image         String
  slug          String   @unique
  ebookCount    Int      @default(0)
  price         Float
  originalPrice Float
  driveLink     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  purchases     Purchase[]
  
  @@map("categories")
}

model Purchase {
  id            String   @id @default(cuid())
  userId        String
  categoryId    String
  orderId       String   @unique
  amount        Float
  status        String   @default("pending") // pending, success, failed, expired
  paymentMethod String?
  paymentType   String?  // payment type from Midtrans
  transactionId String?  // transaction ID from Midtrans
  snapToken     String?
  downloadLink  String?
  emailSent     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@map("purchases")
}
